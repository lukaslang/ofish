% Copyright 2014 Lukas Lang
%
% This file is part of OFISH.
%
%    OFISH is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    OFISH is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with OFISH.  If not, see <http://www.gnu.org/licenses/>.
function [Y1, Y2] = trivspharmcoeff(N, F, V, xi)
%TRIVSPHARMCOEFF Generates the coefficients of fully normalised vector 
%spherical harmonics in the tangent basis created by TRITANBASIS.
%
%   [Y1, Y2] = TRIVSPHARMCOEFF(N, F, V, xi) takes a triangulation F, V of 
%   the unit sphere and returns the coefficients of fully normalised vector
%   spherical harmonics Y_Nj of degree N > 0 and j=-N,...,N at barycentric
%   coordinates xi in terms of the tangent basis generated by tritanBasis.
%
%   Note that size(Yi) = [m, 2*N + 1, 2] for i={1, 2}, where m is the
%   number of faces F. xi must be of size [m, 2].
%
%   The last index of Yi corresponds to Dx and Dy of tritanBasis.

assert(isscalar(N));
assert(N > 0);
assert(size(F, 2) == 3);
assert(size(V, 2) == 3);
assert(size(xi, 1) == size(F, 1));
assert(size(xi, 2) == 2);
m = size(F, 1);

% Compute triangle areas.
a = triangArea(F, V);

% Project scalar spherical harmonics at nodal points.
Vn = trinodalpts2(F, V);
Ynj = zeros(m, 2*N+1, size(Vn, 3));
for k=1:size(Vn, 3)
    Ynj(:, :, k) = spharm(N, normalise(Vn(:, :, k)));
end

% Compute derivatives of polynomials at xi.
[DxA, DyA, Q] = tripoly2deriv(xi);

% Compute triangulated surface properties.
[Dx, Dy] = tritanBasis(F, V);

% Compute metric properties.
[~, ~, ginv] = metricprops(Dx, Dy);

% Compute vector spherical harmonics.
Y1 = zeros(m, 2*N + 1, 2);
Y2 = zeros(m, 2*N + 1, 2);
for k=1:2*N+1
    f = squeeze(Ynj(:, k, :));
    % Compute partial derivative of interpolation.
    Dxf = dot(f, (DxA * Q)', 2);
    Dyf = dot(f, (DyA * Q)', 2);

    % Compute coefficients of second kind.
    Y1(:, k, 1) = (ginv(:, 1, 1) .* Dxf + ginv(:, 1, 2) .* Dyf);
    Y1(:, k, 2) = (ginv(:, 2, 1) .* Dxf + ginv(:, 2, 2) .* Dyf);
        
    Y2(:, k, 1) = bsxfun(@rdivide, Dyf, 2 * a);
    Y2(:, k, 2) = bsxfun(@rdivide, -Dxf, 2 * a);
end

% Normalise.
Y1 = Y1 ./ sqrt(N*(N+1));
Y2 = Y2 ./ sqrt(N*(N+1));

end